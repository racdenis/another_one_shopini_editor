<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="create_shop" xml:space="preserve">
    <value>Create SHOPINI</value>
  </data>
  <data name="exit" xml:space="preserve">
    <value>Exit</value>
  </data>
  <data name="file" xml:space="preserve">
    <value>File</value>
  </data>
  <data name="iteminfo_not_ok" xml:space="preserve">
    <value>ITEMINFO not found!</value>
  </data>
  <data name="iteminfo_ok" xml:space="preserve">
    <value>ITEMINFO found</value>
  </data>
  <data name="iteminfo_set" xml:space="preserve">
    <value>Set ITEMINFO...</value>
  </data>
  <data name="item_edit_form" xml:space="preserve">
    <value>Item edit</value>
  </data>
  <data name="item_text" xml:space="preserve">
    <value>Item</value>
  </data>
  <data name="level_text" xml:space="preserve">
    <value>Level</value>
  </data>
  <data name="main_form" xml:space="preserve">
    <value>Another one SHOPINI editor</value>
  </data>
  <data name="mass_edit" xml:space="preserve">
    <value>Mass edit</value>
  </data>
  <data name="open_iteminfo" xml:space="preserve">
    <value>ITEMINFO path...</value>
  </data>
  <data name="open_shop" xml:space="preserve">
    <value>Open SHOPINI</value>
  </data>
  <data name="pricecoeff_text" xml:space="preserve">
    <value>PriceCoeff</value>
  </data>
  <data name="price_text" xml:space="preserve">
    <value>Price</value>
  </data>
  <data name="save_shop" xml:space="preserve">
    <value>Save SHOPINI</value>
  </data>
  <data name="save_shop_as" xml:space="preserve">
    <value>Save SHOPINI as</value>
  </data>
  <data name="shopname_text_en" xml:space="preserve">
    <value>Shopname (english)</value>
  </data>
  <data name="shopname_text_ru" xml:space="preserve">
    <value>Shopname</value>
  </data>
  <data name="type_text" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="add_new" xml:space="preserve">
    <value>Add Item</value>
  </data>
  <data name="apply_change" xml:space="preserve">
    <value>Apply Change</value>
  </data>
  <data name="clear_all_data" xml:space="preserve">
    <value>Clear all data?</value>
  </data>
  <data name="replace_string_or_not" xml:space="preserve">
    <value>Replace existing string?</value>
  </data>
  <data name="replace_file_ask" xml:space="preserve">
    <value>File already exists. Replace?</value>
  </data>
  <data name="eng_version_mark" xml:space="preserve">
    <value>Checking this will create SHOPINI_ENG folder in saved file directory with identical SHOPINI file, only with localized shop/box name</value>
  </data>
  <data name="help_menuitem" xml:space="preserve">
    <value>Help</value>
  </data>
  <data name="help_text_1" xml:space="preserve">
    <value>This app is intended for SHOPINI files editing. Don't forget to place ITEMINFO file in the app directory. Item classname and name fields work as search fields with results in drop-down list. Controls:</value>
  </data>
  <data name="help_text_2" xml:space="preserve">
    <value>ENTER - while "item", "level" and "price" edit boxes in lower part of app are active adds new item to list if shop type is 1, if shop type is 0 or 2 asks if you want to replace existing item data (if it exists) or adds this item</value>
  </data>
  <data name="help_text_3" xml:space="preserve">
    <value>DELETE - removes one or multiple selected strings</value>
  </data>
  <data name="help_text_5" xml:space="preserve">
    <value>You can change one or multiple parameters of multiple items. Select items, change parameters you want and just apply changes.</value>
  </data>
  <data name="help_text_6" xml:space="preserve">
    <value>You can edit SHOPINI for two languages, check the corresponding checkbox if needed. The second file with localized name will be saved in SHOPINI_ENG folder in saved file directory.</value>
  </data>
  <data name="help_text_7" xml:space="preserve">
    <value>If you want something and I can help with it - vk.com/abb_228 (https://vk.com/id271343327), racdenis@yandex.ru, Discord: abb_228, Steam: racdenis_</value>
  </data>
</root>